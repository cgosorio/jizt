# Copyright (C) 2020-2021, Diego Miguel
# This file is distributed under the same license as the JIZT - AI
# Summarization package.

msgid ""
msgstr ""
"Project-Id-Version: JIZT - AI Summarization \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-25 21:23+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../index.rst:7
msgid "Contents:"
msgstr "Contenidos"

#: ../../index.rst:2
msgid "JIZT - AI Summarization's"
msgstr "JIZT - Res√∫menes mediante IA"

#: dispatcher.main:1 of
msgid "Dispatcher REST API v1."
msgstr "REST API v1 del `Dispatcher`"

#: dispatcher.main.DispatcherService:1 of
msgid "Dispatcher service."
msgstr "Servicio `Dispatcher`"

#: dispatcher.main.DispatcherService:3 of
msgid "This service carries out several tasks:"
msgstr "Este servicio lleva a cabo diferentes tareas"

#: dispatcher.main.DispatcherService:5 of
msgid ""
"Validate the clients' requests, making sure the body contains the "
"necessary fields."
msgstr ""

#: dispatcher.main.DispatcherService:7 of
msgid ""
"Publish messages to the proper microservice Kafka topic, in order to "
"begin the text processing."
msgstr ""

#: dispatcher.main.DispatcherService:9 of
msgid "Manage the completed summaries, storing them in a DB for later retrieval."
msgstr ""

#: dispatcher.main.DispatcherService.kafka_delivery_callback:1 of
msgid "Kafka per-message delivery callback."
msgstr ""

#: dispatcher.main.DispatcherService.kafka_delivery_callback:3 of
msgid ""
"When passed to :meth:`confluent_kafka.Producer.produce` through the "
":attr:`on_delivery` attribute, this method will be triggered by "
":meth:`confluent_kafka.Producer.poll` or "
":meth:`confluent_kafka.Producer.flush` when wither a message has been "
"successfully delivered or the delivery failed (after specified retries)."
msgstr ""

#: dispatcher.main.DispatcherService.kafka_delivery_callback
#: dispatcher.main.get_unique_key of
msgid "Parameters"
msgstr ""

#: dispatcher.main.DispatcherService.kafka_delivery_callback:10 of
msgid "The Kafka error."
msgstr ""

#: dispatcher.main.DispatcherService.kafka_delivery_callback:12 of
msgid "The produced message, or an event."
msgstr ""

#: dispatcher.main.Health:1 of
msgid "Resource for probing service liveness."
msgstr ""

#: dispatcher.main.Health.get:1 of
msgid "Check service health."
msgstr ""

#: dispatcher.main.Health.get dispatcher.main.PlainTextSummary.get
#: dispatcher.main.PlainTextSummary.post dispatcher.main.get_unique_key of
msgid "Returns"
msgstr ""

#: dispatcher.main.Health.get:3 of
msgid ""
"A ``200 OK`` response if everything is working, otherwise a ``500 "
"INTERNAL SERVER ERROR``."
msgstr ""

#: dispatcher.main.Health.get dispatcher.main.PlainTextSummary.get
#: dispatcher.main.PlainTextSummary.post dispatcher.main.get_unique_key of
msgid "Return type"
msgstr ""

#: dispatcher.main.Health.get:5 dispatcher.main.PlainTextSummary.get:9
#: dispatcher.main.PlainTextSummary.post:10 of
msgid ":obj:`dict`"
msgstr ""

#: dispatcher.main.PlainTextSummary:1 of
msgid "Resource for plain-text requests."
msgstr ""

#: dispatcher.main.PlainTextSummary.get:1 of
msgid "HTTP GET."
msgstr ""

#: dispatcher.main.PlainTextSummary.get:3 of
msgid ""
"Gives a response with the summary status and, in case the summary is "
"completed, the output text, e.g. the summary."
msgstr ""

#: dispatcher.main.PlainTextSummary.get:6 of
msgid ""
"A ``200 OK`` response with a JSON body containing the summary. For info "
"on the summary fields, see :class:`data_access.schemas.Summary`."
msgstr ""

#: dispatcher.main.PlainTextSummary.get dispatcher.main.PlainTextSummary.post
#: of
msgid "Raises"
msgstr ""

#: dispatcher.main.PlainTextSummary.get:11 of
msgid "If there exists no summary"
msgstr ""

#: dispatcher.main.PlainTextSummary.post:1 of
msgid "HTTP POST."
msgstr ""

#: dispatcher.main.PlainTextSummary.post:3 of
msgid ""
"Submit a request. When a client first makes a POST request, a response is"
" given with the summary id. The client must then make periodic GET "
"requests with the specific summary id to check the summary status. Once "
"the summary is completed, the GET request will contain the output text, "
"e.g., the summary."
msgstr ""

#: dispatcher.main.PlainTextSummary.post:8 of
msgid ""
"A 202 Accepted response with a JSON body containing the summary id, e.g.,"
" {'summary_id': 73c3de4175449987ef6047f6e0bea91c1036a8599b}."
msgstr ""

#: dispatcher.main.PlainTextSummary.post:12 of
msgid "If the request body"
msgstr ""

#: dispatcher.main.disable_endpoint_logs:1 of
msgid "Disable logs for requests to specific endpoints."
msgstr ""

#: dispatcher.main.get_unique_key:1 of
msgid "Get a unique key for a message."
msgstr ""

#: dispatcher.main.get_unique_key:3 of
msgid ""
"This method hashes the string formed by concatenating the :attr:`source`,"
" :attr:`model` and :attr:`param` attributes. SHA-256 algorithm is used."
msgstr ""

#: dispatcher.main.get_unique_key:7 of
msgid "``source`` attribute in the JSON body of the request."
msgstr ""

#: dispatcher.main.get_unique_key:9 of
msgid "``model`` attribute in the JSON body of the request."
msgstr ""

#: dispatcher.main.get_unique_key:11 of
msgid "``params`` attribute in the JSON body of the request."
msgstr ""

#: dispatcher.main.get_unique_key:14 of
msgid "The unique, SHA-256 ecrypted key."
msgstr ""

#: dispatcher.main.get_unique_key:15 of
msgid ":obj:`str`"
msgstr ""

#: ../../index.rst:13
msgid "Indices and tables"
msgstr ""

#: ../../index.rst:15
msgid ":ref:`genindex`"
msgstr ""

#: ../../index.rst:16
msgid ":ref:`modindex`"
msgstr ""

#: ../../index.rst:17
msgid ":ref:`search`"
msgstr ""

